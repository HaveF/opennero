#summary Adding things to OpenNERO mods
#labels Exercise
#sidebar TableOfContents

==Introduction==

In this exercise, you will go through the steps required to create a Mod consisting of a flat terrain surrounded by four walls and a simple environment with an agent that can move around. This exercise can be done either with the [http://code.google.com/p/opennero/source/browse/ working copy of the source] or with one of the [http://code.google.com/p/opennero/downloads/list binary distributions].

 * If working with source, use the `mods` directory and update the application build to copy your files into the product folder `dist`.
 * If working with a binary distribution, use the same folder as the executable on Windows and Linux, or `OpenNERO.app/Contents/Resources` folder on Mac OS X (right click on the app to "Show Package Contents".

==Creating a Mod==

 * Create a new sub-folder in the mods directory you are using. For the rest of this discussion we will assume this folder is called TESTMOD, but it can be anything you want.
 * Create two (empty) files in TESTMOD: *`main.py`* and *`__init__.py`*
 * In *main.py*, define the `ModMain` function:
{{{
def ModMain():
    print "Hello, Mod!"
}}}
 * This is the function that will get called when you load your mod.
 * If using source, update the build
 * Run the application

You should see a button appear for TESTMOD in the Hub menu. When you press this button, you should see an empty screen and the output log (usually nero_log.txt) should contain 'Hello, Mod!'. Congratulations, you've added a mod!

Now let's make it more useful.

==Adding objects==

Each new type of object in OpenNERO is defined in an XML file called a Template. Here is an example (which is just a cube):
{{{
<Template>
  <Audio>
  </Audio>
  <Render>
    <MaterialType>solid</MaterialType>
    <MaterialFlagLighting>false</MaterialFlagLighting>
    <AniMesh>data/cube/cube.obj</AniMesh>
    <Scale>1 1 1</Scale>
    <Rotation>0 0 0</Rotation>
  </Render>
</Template>
}}}

Create this file in `TESTMOD/data/cube/Cube.xml`

Here are some things about this file:
 * Top level sections, like Audio, Render and AI (which we will add later) describe different aspects of the entity.
 * Render part describes how the object looks. In particular, it tells OpenNERO that:
   * the object is made of solid material
   * it is not a light source
   * it is based on the (possibly animated) mesh in cube/cube.obj
   * it defaults to the X-Y-Z scale of 1x1x1 (relative to mesh dimensions)
   * it is initially not rotated from the mesh (using around-X, around-Y, around-Z [http://en.wikipedia.org/wiki/Euler_angles Euler Angle] in degrees)

Now we need to get the [http://en.wikipedia.org/wiki/Obj obj file] that our XML file refers to. There are several ways to get such a file - make a new model in a 3D modeling tool and export it, refer to one of the common models in OpenNERO, or copy the common model into the local directory (if you need to modify it for your mod). OpenNERO already comes with a cube obj file, so we can just refer to it with:
{{{
<AniMesh>data/shapes/cube/cube.obj</AniMesh>
}}}

Or, you can copy [http://code.google.com/p/opennero/source/browse/trunk/mods/common/data/shapes/cube/cube.obj mods/common/data/shapes/cube/cube.obj] to `TESTMOD/data/cube/`

Now that you have the template `data/cube/Cube.xml`, you should change your `main.py` to actually add a cube into the world. The new file should look something like this:

{{{
from OpenNero import * # import the OpenNERO C++ API, such as Vector3f
from common import * # import commonly used OpenNERO Python API, such as addObject

def ModMain():
    print "Hello, Mod!"
    addObject("data/cube/Cube.xml", Vector3f(0,0,0)) # add a default-looking cube at the center of the world
}}}

If by the end of this you have something that looks like this:

<a href="http://opennero.googlecode.com/svn/wiki/AddingStuffExercise-Cube.png"><img src="http://opennero.googlecode.com/svn/wiki/AddingStuffExercise-Cube.png" height="300" width="400"></img></a>

Then you were successful, and you are looking at (one side of) a cube.

==Adding a camera==

You are looking at the cube at a flat angle. If you wanted to see it's 3-dimensionality, you could try adding the following code:

{{{
    camRotateSpeed = 10
    camMoveSpeed   = 500
    camZoomSpeed   = 50
    cam = getSimContext().addCamera(camRotateSpeed, camMoveSpeed, camZoomSpeed)
    cam.setFarPlane(5000)
    cam.setEdgeScroll(False)
    cam.setPosition(Vector3f(5, 5, 5))
    cam.setTarget(Vector3f(0, 0, 1))
}}}

Adding a camera in this way will change your vantage point, where you are looking, and allow you to use the *A*, *S*, *W* and *D* keys to move around, *Q* and *E* keys to rotate, and *Z* and *C* keys (or mouse wheel) to zoom in or out.

==Adding a terrain and walls==

Let us now make our Mod more interesting by adding a textured terrain and walls surrounding the terrain.  We can do this in the same way that we added the cube, i.e. by creating the files defining the terrain and walls and then invoking the {{{addObject()}}} function in `main.py`.  OpenNERO already comes with the files for a flat terrain and a wall, so we will use them in this exercise for simplicity.

Copy the terrain files [http://code.google.com/p/opennero/source/browse/trunk/mods/Roomba/data/terrain/FlatTerrain.xml mods/Roomba/data/terrain/FlatTerrain.xml], [http://code.google.com/p/opennero/source/browse/trunk/mods/Roomba/data/terrain/ flat-texture.jpg mods/Roomba/data/terrain/flat-texture.jpg], and [http://code.google.com/p/opennero/source/browse/trunk/mods/Roomba/data/terrain/terrain-heightmap-flat.bmp mods/Roomba/data/terrain/terrain-heightmap-flat.bmp] to `TESTMOD/data/terrain/`

The XML template file for the flat terrain looks like this:
{{{
<Template>
  <ObjectTemplate>
    <Name>Terrain</Name>
  </ObjectTemplate>
  <Render>
    <MaterialType>solid</MaterialType>
    <MaterialFlagLighting>false</MaterialFlagLighting>
    <Terrain>data/terrain/terrain-heightmap-flat.bmp</Terrain>
    <Texture0>data/terrain/flat-texture.jpg</Texture0>    
    <ScaleTexture>1.0 1.0</ScaleTexture>
    <Scale>0.390625 0.390625 1</Scale>
  </Render>
</Template>
}}}

Notice that the `Render` section in this template is different from the template for the cube in a couple of ways:
  * It uses a [http://en.wikipedia.org/wiki/Heightmap height map] file instead of a mesh object file to specify the geometry of the terrain.  Height maps are more convenient for specifying terrains.
  * It specifies an image to be used as texture for the surface of the terrain (see [http://en.wikipedia.org/wiki/Texture_mapping texture mapping] for details).

Add the terrain to the Mod by adding the following line of code to `main.py`:
{{{
    addObject("data/terrain/FlatTerrain.xml", Vector3f(-50,-50,0)) # add a flat terrain at coordinates (-50,-50,0)
}}}

Now the Mod should look like the following, with the cube at the center of the terrain:

<a href="http://opennero.googlecode.com/svn/wiki/AddingStuffExercise-Terrain.png"><img src="http://opennero.googlecode.com/svn/wiki/AddingStuffExercise-Terrain.png" height="300" width="400"></img></a>


==Adding an environment==

An environment in OpenNERO is where you can define the rules of the world, such as what happens when an agent reaches the end of the maze, or when two agents bump into each other, or if one of them vacuums up a crumb.

Here is a basic environment class (that does not do a whole lot yet):

{{{
class TestEnvironment(Environment):
    def __init__(self):
        """
        Create the environment
        """
        Environment.__init__(self)

        # define the action space
        action_info = FeatureVectorInfo()
        action_info.add_discrete(0, 3) # 0, 1, 2 or 3

        # define the observation space
        observation_info = FeatureVectorInfo()
        observation_info.add_continuous(0, 1) # between 0 and 100

        # define the reward space
        reward_info = FeatureVectorInfo()        
        reward_info.add_continuous(0,100) # between 0 and 100

        self.agent_info = AgentInitInfo(observation_info, action_info, reward_info)
        print 'Initialized TestEnvironment'
        print self.agent_info
        
    def reset(self, agent):
        """
        Reset the environment to its initial state
        """
        return True

    def get_agent_info(self, agent):
        return self.agent_info

    def step(self, agent, action):
        """
        Adjust the world and the agent based on its action
        @return the agent's reward
        """
        return 0

    def sense(self, agent):
        """
        Figure out what the agent's input (observation) is
        @return the agent's observation
        """
        default_observation = self.agent_info.sensors.get_instance()
        return default_observation

    def is_active(self, agent):
        
        return True

    def is_episode_over(self, agent):
        """
        Figure out if the agent should 'die' and 'respawn'
        """
        return False

    def cleanup(self):
        """
        Perform any last-minute cleanup tasks
        """
        pass
}}}

You can put it in your main.py (or another Python file if you would like).

To set it as the current environment, use this code:

{{{
    env = TestEnvironment()
    set_environment(env)
}}}

==Adding an agent==

TBA

==Adding user interaction==

===Adding keyboard commands===

===Adding graphical user interface===