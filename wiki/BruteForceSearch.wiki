#summary Brute-force (Uninformed) Search Demo
#labels Demo
#sidebar TableOfContents

==Introduction==

Brute-force (or uninformed) search methods try out alternatives
systematically in a fixed order, in order to find a solution. In the
case of the maze, it means finding a path to the goal. Watch the
videos below to see how they work, or run OpenNERO yourself to try
them out interactively.

==Running the Demo==

To run the demo, first:

  # [RunningOpenNero start OpenNERO]
  # Start the [MazeMod Maze mod]
  # Click on the Depth First Search button to run DFS
  # Click on the Bredth First Search button to run BFS

Then, read about and run each type of agent:

==Depth First Search==

[http://en.wikipedia.org/wiki/Depth-first_search Depth-First Search] (see section 3.4.3 of [http://aima.cs.berkeley.edu/ AIMA]) is a technique for searching a graph or a tree-like structure. MazeMod includes an agent that searches for the target (red cube) by expanding the graph representing the maze in a depth-first manner.

  # Click on Depth First Search and observe the resulting behavior. Note:
    # The maze can be abstracted as a graph of cells connected by edges where there are no walls
    # Blue square markers represent expanded nodes
    # When the agent runs into a dead-end, it has to retrace its steps to get to the next branch
    # When the agent reaches to goal, it displays the path to it with white square markers

<wiki:video url="http://www.youtube.com/watch?v=3EG2OmjZ4wg"/>

==Breadth First Search==

[http://en.wikipedia.org/wiki/Breadth-first_search Breadth-First Search] (see section 3.4.1 of [http://aima.cs.berkeley.edu/ AIMA]) is a technique for searching a graph or a tree-like structure by exploring all leaves of the same depth first. MazeMod includes an agent that searches for the target (red cube) by expanding the graph representing the maze in a breadth-first manner.

  # Click on Breadth First Search and observe the resulting behavior. Note:
    # The maze can be abstracted as a graph of cells connected by edges where there are no walls
    # Blue square markers represent expanded nodes
    #Green squares mark the nodes that have been generated but not yet expanded (i.e. their successors have not been generated)
    # Yellow square marks the node where the agent needs to go next
    # Since there is a lot more retracing the agent would need to do for a Breadth First exploration, we allow it to "Teleport" from its current position to the yellow square.
    # When the agent reaches to goal, it displays the path to it with white square markers

<wiki:video url="http://www.youtube.com/watch?v=SzAj7s4P2zo"/>

==Source Code==

The source code for this and other Maze agents is in [http://code.google.com/p/opennero/source/browse/trunk/mods/Maze/agent.py agent.py].

The Breadth First Search is implemented in the `BFSSearchAgent` class, which actually extends `GenericSearchAlgorithm` along with `AStarSearch`. Depth First search is implemented in `DFSSearchAgent`. See SystemOverview for a general description of how agents work.

==Next Steps==

There are other varieties of search. For example, [http://aima.cs.berkeley.edu/ AI: A Modern Approach] describes the following uninformed search strategies:

  * 3.4. Uninformed Search Strategies ... 81 
    * 3.4.1. Breadth-first search ... 81 
    * 3.4.2. Uniform-cost search ... 83 
    * 3.4.3. Depth-first search ... 85 
    * 3.4.4. Depth-limited search ... 87 
    * 3.4.5. Iterative deepening depth-first search ... 88 
    * 3.4.6. Bidirectional search ... 90 

We encourage you to implement one of these in OpenNERO as a programming assignment - you really understand something when you build it!

After you understand all there is to know about these uninformed search agents, you can check out the HeuristicSearch demo page.
